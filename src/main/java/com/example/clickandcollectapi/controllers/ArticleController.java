package com.example.clickandcollectapi.controllers;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Article;
import com.example.clickandcollectapi.entities.Stock;
import com.example.clickandcollectapi.entities.TypeArticle;
import com.example.clickandcollectapi.repositories.ArticleRepository;
import com.example.clickandcollectapi.repositories.TypeArticleRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/article") // This means URL's start with /demo (after Application path)
public class ArticleController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private ArticleRepository articleRepository;
	private TypeArticleRepository typeArticleRepository;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Article> getAllArticles() {
		// This returns a JSON or XML with the users
		return articleRepository.findAll();
	}

	@RequestMapping(value = { "/", "/{articleId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findArticleById(@PathVariable Integer articleId) throws JsonProcessingException {
		
		Optional<Article> n = articleRepository.findById(articleId);
		if(n.isPresent()){
			Article typeArticle = n.get();
			return typeArticle.toJSON().toString();
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/article-controller");
			return JSONErreur.toString();
		}
		
	}

	//besoin de delete autres tables
	@DeleteMapping("/delete/{articleId}")  
	private void deleteTypeArticle(@PathVariable("articleId") Integer articleId)   
	{  
		articleRepository.deleteById(articleId);
	}
	
	@RequestMapping(value = { "/", "/update/{articleId}" }, method = RequestMethod.PUT, produces = "application/json") 
	private @ResponseBody String update(@PathVariable("articleId") Integer articleId, @RequestParam(required = false) Double prix, @RequestParam(required = false) Integer idTypeArticle)
			throws JsonProcessingException 
	{  
		Optional<Article> n = articleRepository.findById(articleId);
		if(n.isPresent()){
			Article article = n.get();
			if(prix != null)
			{
				article.setPrix(prix);
			}
			if(idTypeArticle != null)
			{
				TypeArticle ta = new TypeArticle();
				ta.setId(idTypeArticle);
				article.setTypeArticle(ta);
			}
			if(prix != null || idTypeArticle != null)
			{
				articleRepository.save(article);
				return article.toJSON().toString();
			}
			else
			{
				JSONObject JSONInfo = new JSONObject();
				JSONInfo.put("message", "Aucune modification nécéssaire");
				JSONInfo.put("article", article.toJSON());
				return JSONInfo.toString();
			}
			
		}
		else
		{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/article-controller");
			return JSONErreur.toString();
		}
		
	}

	@RequestMapping(value = { "/", "/add" }, method = RequestMethod.POST, produces = "application/json") 
	public @ResponseBody String addNewArticle(@RequestParam Double prix, @RequestParam Integer idTypeArticle)
			throws JsonProcessingException {
		
		Article n = new Article();
		n.setPrix(prix);
		TypeArticle ta = new TypeArticle();
		ta.setId(idTypeArticle);
		n.setTypeArticle(ta);
		articleRepository.save(n);
		return n.toJSON().toString();
	}
}
