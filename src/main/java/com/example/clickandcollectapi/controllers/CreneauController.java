package com.example.clickandcollectapi.controllers;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Creneau;
import com.example.clickandcollectapi.entities.Magasin;
import com.example.clickandcollectapi.entities.Message;
import com.example.clickandcollectapi.entities.User;
import com.example.clickandcollectapi.repositories.CreneauRepository;
import com.example.clickandcollectapi.repositories.MessageRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/creneau") // This means URL's start with /demo (after Application path)
public class CreneauController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CreneauRepository creneauRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewCreneau(@RequestParam Integer etat,
			@RequestParam(required = false) String dateCreneau, @RequestParam Integer idMagasin,
			@RequestParam Integer idUser) throws JsonProcessingException, ParseException {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Creneau n = new Creneau();
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
		Date startDate = df.parse(dateCreneau);
		n.setDateCreneau(startDate);
		n.setEtatCreneau(etat);
		User user = new User();
		user.setId(idUser);
		Magasin magasin = new Magasin();
		magasin.setId(idMagasin);
		n.setMagasin(magasin);
		n.setUserCreneau(user);
		creneauRepository.save(n);
		return n.toJSON().toString();
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Creneau> getAllCreneaux() {
		// This returns a JSON or XML with the users
		return creneauRepository.findAll();
	}


	@RequestMapping(value = { "/", "/{creneauId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findCreneauById(@PathVariable Integer creneauId) throws JsonProcessingException {
		
		
		Optional<Creneau> n = creneauRepository.findById(creneauId);
		if(n.isPresent()){
			Creneau creneau = n.get();
			return creneau.toJSON().toString();
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/creneau-controller");
			return JSONErreur.toString();
		}
		
	}

	@DeleteMapping("/delete/{creneauId}")  
	private void deleteCreneau(@PathVariable("creneauId") Integer creneauId)   
	{  
		creneauRepository.deleteById(creneauId);
	}

	@RequestMapping(value = { "/", "/update/{creneauId}" }, method = RequestMethod.PUT, produces = "application/json") 
	private @ResponseBody String update(@PathVariable("creneauId") Integer creneauId, @RequestParam(required = false) Integer etat, @RequestParam(required = false) String dateCreneau, @RequestParam(required = false) Integer idMagasin, @RequestParam(required = false) Integer idUser)
			throws JsonProcessingException, ParseException 
	{  
		Optional<Creneau> n = creneauRepository.findById(creneauId);
		if(n.isPresent()){
			Creneau creneau = n.get();
			if(etat != null){
				creneau.setEtatCreneau(etat);
			}
			if(dateCreneau != null){
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
				Date startDate = df.parse(dateCreneau);
				creneau.setDateCreneau(startDate);
			}
			if(idMagasin != null){
				Magasin magasin = new Magasin();
				magasin.setId(idMagasin);
				creneau.setMagasin(magasin);
			}
			if(idUser != null){
				User user = new User();
				user.setId(idUser);
				creneau.setUserCreneau(user);
			}
			if(etat != null || dateCreneau != null || idMagasin != null || idUser != null)
			{
				creneauRepository.save(creneau);
				return creneau.toJSON().toString();
			}
			else
			{
				JSONObject JSONInfo = new JSONObject();
				JSONInfo.put("message", "Aucune modification nécéssaire");
				JSONInfo.put("creneau", creneau.toJSON());
				return JSONInfo.toString();
			}
			
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/creneau-controller");
			return JSONErreur.toString();
		}
		
	}  
}
