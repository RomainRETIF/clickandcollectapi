package com.example.clickandcollectapi.controllers;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Article;
import com.example.clickandcollectapi.entities.Magasin;
import com.example.clickandcollectapi.entities.Stock;
import com.example.clickandcollectapi.repositories.ArticleRepository;
import com.example.clickandcollectapi.repositories.MagasinRepository;
import com.example.clickandcollectapi.repositories.StockRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/stock") // This means URL's start with /demo (after Application path)

public class StockController {
    @Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private StockRepository stockRepository;
	private MagasinRepository magasinRepository;
    private ArticleRepository articleRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewStock(@RequestParam Integer quantite,
    @RequestParam Integer idMagasin,@RequestParam Integer idArticle) {
		
		Stock n = new Stock();
        Article a = new Article();
        Magasin m = new Magasin();
        a.setId(idArticle);
        m.setId(idMagasin);
        n.setQuantite(quantite);
		n.setMagasin(m);
        n.setArticle(a);
		stockRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Stock> getAllStock() {
		//This returns a JSON or XML with the users
		return stockRepository.findAll();
	}

	@RequestMapping(value = { "/", "/{stockId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findCommandeById(@PathVariable Integer stockId) throws JsonProcessingException {
		
		Optional<Stock> n = stockRepository.findById(stockId);
		if(n.isPresent()){
			Stock stock = n.get();
			return stock.toJSON().toString();
		}
		else{
			return "Error";
		}
		
	}

	
	@DeleteMapping("/delete/{stockId}")  
	private void deleteStock(@PathVariable("stockId") Integer stockId)
	{  
		stockRepository.deleteById(stockId);
	}

	@PutMapping("/update/{stockId}")  
	private @ResponseBody String update(@PathVariable("stockId") Integer stockId,
	@RequestParam Integer quantite,@RequestParam Integer idMagasin,
    @RequestParam Integer idArticle)   
	{  
		Optional<Stock> n = stockRepository.findById(stockId);
		if(n.isPresent()){
			Stock stock = n.get();
			Article a = new Article();
            Magasin m = new Magasin();
			m.setId(idMagasin);
			a.setId(idArticle);
            stock.setQuantite(quantite);
            stock.setMagasin(m);
            stock.setArticle(a);
			stockRepository.save(stock);
			return "Saved";
		}
		else{
			return "Error";
		}
		
	}  
}
