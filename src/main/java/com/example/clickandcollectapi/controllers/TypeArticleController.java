package com.example.clickandcollectapi.controllers;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Article;
import com.example.clickandcollectapi.entities.TypeArticle;
import com.example.clickandcollectapi.repositories.ArticleRepository;
import com.example.clickandcollectapi.repositories.TypeArticleRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/typearticle") // This means URL's start with /demo (after Application path)
public class TypeArticleController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private TypeArticleRepository typeArticleRepository;
	private ArticleRepository articleRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewTypeArticle(@RequestParam String libelle, @RequestParam String description)
			throws JsonProcessingException {
		
		TypeArticle n = new TypeArticle();
		n.setlibelle(libelle);
		n.setDescription(description);
		typeArticleRepository.save(n);
		return n.toJSON().toString();
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<TypeArticle> getAllTypeArticles() {
		// This returns a JSON or XML with the users
		return typeArticleRepository.findAll();
	}

	@RequestMapping(value = { "/", "/{typeArticleId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findTypeArticleById(@PathVariable Integer typeArticleId) throws JsonProcessingException {
		
		Optional<TypeArticle> n = typeArticleRepository.findById(typeArticleId);
		if(n.isPresent()){
			TypeArticle typeArticle = n.get();
			return typeArticle.toJSON().toString();
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/type-article-controller");
			return JSONErreur.toString();
		}
		
	}
	

	@DeleteMapping("/delete/{typeArticleId}")  
	private void deleteTypeArticle(@PathVariable("typeArticleId") Integer typeArticleId)   
	{  
		typeArticleRepository.deleteById(typeArticleId);
	}

	@RequestMapping(value = { "/", "/update/{typeArticleId}" }, method = RequestMethod.PUT, produces = "application/json")
	private @ResponseBody String update(@PathVariable("typeArticleId") Integer typeArticleId,
	 @RequestParam(required = false) String libelle,
	 @RequestParam(required = false) String description) throws JsonProcessingException 
	{  
		Optional<TypeArticle> n = typeArticleRepository.findById(typeArticleId);
		if(n.isPresent()){
			TypeArticle typeArticle = n.get();
			if(libelle != null)
			{
				typeArticle.setlibelle(libelle);
			}
			if(description != null)
			{
				typeArticle.setDescription(description);
			}
			if(libelle != null || description != null)
			{
				typeArticleRepository.save(typeArticle);
				return typeArticle.toJSON().toString();
			}
			else
			{
				JSONObject JSONInfo = new JSONObject();
				JSONInfo.put("message", "Aucune modification nécéssaire");
				JSONInfo.put("typeArticle", typeArticle.toJSON());
				return JSONInfo.toString();
			}
			
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/type-article-controller/");
			return JSONErreur.toString();
		}
		
	}  
}
