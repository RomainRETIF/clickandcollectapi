package com.example.clickandcollectapi.controllers;

import java.util.Date;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Contenir;
import com.example.clickandcollectapi.entities.Creneau;
import com.example.clickandcollectapi.entities.Magasin;
import com.example.clickandcollectapi.entities.Message;
import com.example.clickandcollectapi.entities.User;
import com.example.clickandcollectapi.repositories.ArticleRepository;
import com.example.clickandcollectapi.repositories.ContenirRepository;
import com.example.clickandcollectapi.repositories.CreneauRepository;
import com.example.clickandcollectapi.repositories.MessageRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
@Controller // This means that this class is a Controller
@RequestMapping(path = "/contenir") // This means URL's start with /demo (after Application path)
public class ContenirController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private ArticleRepository articleRepository;
	@Autowired
	private ContenirRepository contenirRepository;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Contenir> getAllContenir() {
		// This returns a JSON or XML with the users
		return contenirRepository.findAll();
	}

	@RequestMapping(value = { "/", "/{creneauId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findCreneauById(@PathVariable Integer creneauId) throws JsonProcessingException {
		
		
		Optional<Contenir> n = contenirRepository.findById(creneauId);
		if(n.isPresent()){
			Contenir message = n.get();
			return message.toString();
		}
		else{
			return "Error";
		}
		
	}

}
