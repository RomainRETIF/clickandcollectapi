package com.example.clickandcollectapi.controllers;

import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Article;
import com.example.clickandcollectapi.entities.Commande;
import com.example.clickandcollectapi.entities.TypeArticle;
import com.example.clickandcollectapi.repositories.ArticleRepository;
import com.example.clickandcollectapi.repositories.CommandeRepository;
import com.example.clickandcollectapi.repositories.TypeArticleRepository;
import com.example.clickandcollectapi.entities.Contenir;
import com.example.clickandcollectapi.repositories.ContenirRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/contenir") // This means URL's start with /demo (after Application path)
public class ContenirController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private ArticleRepository articleRepository;
	@Autowired
	private ContenirRepository contenirRepository;
	@Autowired
	private CommandeRepository commandeRepository;

	@RequestMapping(value = { "/", "/add" }, method = RequestMethod.POST, produces = "application/json") 
	public @ResponseBody String addNewCommande(@RequestParam Integer quantite,
    @RequestParam Integer idArticle,@RequestParam Integer idCommande) throws JsonProcessingException {
		
		Contenir n = new Contenir();
        Article a = new Article();
        Commande c = new Commande();
        a.setId(idArticle);
		c.setId(idCommande);
		n.setQuantite(quantite);
        n.setArticle(a);
        n.setCommande(c);
		contenirRepository.save(n);
		return n.ajoutToJSON().toString();
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Contenir> getAllContenir() {
		// This returns a JSON or XML with the users
		return contenirRepository.findAll();
	}

	@RequestMapping(value = { "/", "/{contenirId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findContenirById(@PathVariable Integer contenirId) throws JsonProcessingException {
		
		
		Optional<Contenir> n = contenirRepository.findById(contenirId);
		if(n.isPresent()){
			Contenir contenir = n.get();
			return contenir.toJSON().toString();
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/contenir-controller");
			return JSONErreur.toString();
		}
		
	}

	@DeleteMapping("/delete/{contenirId}")  
	private void deleteContenir(@PathVariable("contenirId") Integer contenirId)
	{  
		contenirRepository.deleteById(contenirId);
	}

	@RequestMapping(value = { "/", "/update/{contenirId}" }, method = RequestMethod.PUT, produces = "application/json") 
	private @ResponseBody String update(@PathVariable("contenirId") Integer contenirId,
	@RequestParam(required = false) Integer quantite,@RequestParam(required = false) Integer idArticle,
	@RequestParam(required = false) Integer idCommande) throws JsonProcessingException
	{  
		Optional<Contenir> n = contenirRepository.findById(contenirId);
		if(n.isPresent()){
			Contenir contenir = n.get();
			if(idArticle != null)
			{
				Article a = new Article();
				a.setId(idArticle);
				contenir.setArticle(a);
			}
			if(idCommande != null)
			{
				Commande c = new Commande();
				c.setId(idCommande);
				contenir.setCommande(c);
			}
        	if(quantite != null)
			{
				contenir.setQuantite(quantite);
			}			
        	if(idArticle != null || idCommande != null || quantite != null)
			{
				contenirRepository.save(contenir);
				return contenir.ajoutToJSON().toString();
			}
			else
			{
				JSONObject JSONInfo = new JSONObject();
				JSONInfo.put("message", "Aucune modification nécéssaire");
				JSONInfo.put("contenir", contenir.ajoutToJSON());
				return JSONInfo.toString();
			}
        	
			
		}
		else{
			JSONObject JSONErreur = new JSONObject();
			JSONErreur.put("message", "Error");
			JSONErreur.put("help", "/swagger-ui.html#/contenir-controller");
			return JSONErreur.toString();
		}
		
	}  


}
