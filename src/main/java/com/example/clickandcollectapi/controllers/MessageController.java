package com.example.clickandcollectapi.controllers;

import java.util.Date;
import java.util.Optional;

import javax.servlet.http.HttpServletResponse;

import com.example.clickandcollectapi.entities.Message;
import com.example.clickandcollectapi.entities.User;
import com.example.clickandcollectapi.exceptions.RessourceBadRequestException;
import com.example.clickandcollectapi.exceptions.RessourceIntrouvableException;
import com.example.clickandcollectapi.repositories.MessageRepository;
import com.fasterxml.jackson.core.JsonProcessingException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.type.classreading.MethodMetadataReadingVisitor;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import ch.qos.logback.core.joran.conditional.ElseAction;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/message") // This means URL's start with /demo (after Application path)
public class MessageController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private MessageRepository messageRepository;

	@PostMapping(path = "") // Map ONLY POST Requests
	@RequestMapping(value = { "/", "/add" }, method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody String addNewMessage(@RequestParam String titre, @RequestParam String contenu, @RequestParam Integer idClient, @RequestParam Integer idVendeur)
			throws JsonProcessingException {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Message n = new Message();
		n.setTitre(titre);
		n.setContenu(contenu);
		n.setDateMessage(new Date());

		User vendeur = new User();
		vendeur.setId(idVendeur);

		User client = new User();
		client.setId(idClient);
		
		n.setClient(client);
		n.setVendeur(vendeur);

		messageRepository.save(n);
		return n.ajoutToJSON().toString();
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Message> getAllMessages() {
		// This returns a JSON or XML with the users
		return messageRepository.findAll();
	}


	@RequestMapping(value = { "/", "/{messageId}" }, method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody String findMessageById(@PathVariable Integer messageId) throws JsonProcessingException, RessourceIntrouvableException {
		
		
		Optional<Message> n = messageRepository.findById(messageId);
		if(n.isPresent()){
			Message message = n.get();
			return message.toJSON().toString();
		}
		else{
			throw new RessourceIntrouvableException(Integer.toString(messageId)+";/swagger-ui.html#/message-controller");
		}
		
	}

	@DeleteMapping("/delete/{messageId}")  
	private void deleteMessage(@PathVariable("messageId") Integer messageId)   
	{  
		if(messageRepository.findById(messageId).isPresent()){
			messageRepository.deleteById(messageId);
		}
		else{
			throw new RessourceIntrouvableException(Integer.toString(messageId)+";/swagger-ui.html#/message-controller");
		}
	}

	@RequestMapping(value = { "/", "/update/{messageId}" }, method = RequestMethod.PUT, produces = "application/json")
	private @ResponseBody String update(@PathVariable("messageId") Integer messageId, @RequestParam(required = false) String titre, @RequestParam(required = false) String contenu, @RequestParam(required = false) Integer idClient, @RequestParam(required = false) Integer idVendeur)
			throws JsonProcessingException 
	{  
		Optional<Message> n = messageRepository.findById(messageId);
		if(n.isPresent()){
			Message message = n.get();
			if(titre != null){
				message.setTitre(titre);
			}
			if(contenu != null){
				message.setContenu(contenu);
			}
			if(idClient != null){
				User client = new User();
				client.setId(idClient);
				message.setClient(client);
			}
			if(idVendeur != null){
				User vendeur = new User();
				vendeur.setId(idVendeur);
				message.setVendeur(vendeur);
			}
			if(titre != null || contenu != null || idClient != null || idVendeur != null)
			{
				messageRepository.save(message);
				return message.ajoutToJSON().toString();
			}
			else
			{
				throw new RessourceBadRequestException(Integer.toString(messageId)+";/swagger-ui.html#/message-controller");
			}
			
		}
		else{
			throw new RessourceIntrouvableException(Integer.toString(messageId)+";/swagger-ui.html#/message-controller");
		}
		
	}  
}
